/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.Patient;

import Models.Doctor;
import Models.Hospital;
import Models.DoctorDirectory;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author chait
 */
public class AppointmentPanel extends javax.swing.JPanel {

    /**
     * Creates new form AppointmentPanel
     */
    JPanel bottomPanel;
    Models.System systemObj;
    Models.City city;
    Models.Community community;


    public AppointmentPanel(JPanel bottomPanel, Models.System systemObj,  Models.City city, Models.Community community) {
        initComponents();
        this.bottomPanel = bottomPanel;
        this.systemObj = systemObj;
        this.city = city;
        this.community = community;
        populateDoctorTableData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        doctorsTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        goBackToLocationPanel = new javax.swing.JButton();
        appointmentDate = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(51, 51, 51));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("SELECT DOCTORS TO BOOK AN APPOINTMENT");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 412));

        doctorsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Last Name", "City", "Specialty", "YoE", "Qualifications"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        doctorsTable.setMinimumSize(new java.awt.Dimension(500, 80));
        doctorsTable.setPreferredSize(new java.awt.Dimension(500, 80));
        doctorsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctorsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(doctorsTable);

        jButton1.setText("CONFIRM APPOINTMENT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        goBackToLocationPanel.setText("GO BACK");
        goBackToLocationPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBackToLocationPanelActionPerformed(evt);
            }
        });

        appointmentDate.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Choose Appointment Date");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 853, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(245, 245, 245)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(appointmentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(298, 298, 298)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(goBackToLocationPanel)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel1)))
                .addContainerGap(465, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(goBackToLocationPanel))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(appointmentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(jButton1)
                .addContainerGap(90, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void doctorsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctorsTableMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_doctorsTableMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        try{
            if (!(appointmentDate.getDate() == null)){
                
                JOptionPane.showMessageDialog(this, "Appointment Made Successfully!");
            }
            
            else{
                throw new IllegalArgumentException("Please choose appointment date");
            }
        }
        catch (IllegalArgumentException e){
            JOptionPane.showMessageDialog(this, e.getMessage(),"Invalid Appointment Submission",JOptionPane.ERROR_MESSAGE);
        }
       
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void goBackToLocationPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBackToLocationPanelActionPerformed
        // TODO add your handling code here:

        LocationPanel locationPanel = new LocationPanel(bottomPanel, this.systemObj);
        bottomPanel.add(locationPanel);
        CardLayout layout = (CardLayout) bottomPanel.getLayout();
        layout.next(bottomPanel);
    }//GEN-LAST:event_goBackToLocationPanelActionPerformed

      private void populateDoctorTableData() {
        DefaultTableModel model = (DefaultTableModel) doctorsTable.getModel();
        model.setRowCount(0);
        DoctorDirectory doctorDirectory = new DoctorDirectory();

        
        for(Hospital hospitalObj: this.systemObj.getListOfHospitals()){
            if(hospitalObj.getCommunity().getCommunityName() == null ? community.getCommunityName() == null : hospitalObj.getCommunity().getCommunityName().equals(community.getCommunityName())) {
               doctorDirectory = hospitalObj.getDoctorsDirectory();

            }
            for (Doctor docObj: doctorDirectory.getDoctors()){
            Object[] row = new Object[6];

            row[0] = docObj.getFirstName();
            row[1] = docObj.getLastName();
            row[2] = docObj.getCity().getCityName();
            row[3] = docObj.getSpecialty();
            row[4] = docObj.getYearsOfExperiencce();
            row[5] = docObj.getQualifications();
            model.addRow(row);
            
            

        }

        }
            }    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser appointmentDate;
    private javax.swing.JTable doctorsTable;
    private javax.swing.JButton goBackToLocationPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
