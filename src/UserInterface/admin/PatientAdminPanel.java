/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.admin;

import Models.City;
import Models.Community;
import Models.House;
import Models.Patient;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author chait
 */
public class PatientAdminPanel extends javax.swing.JPanel {

    /**
     * Creates new form PatientAdminPanel
     */
    JPanel bottomPanel;
    public PatientAdminPanel(JPanel bottomPanel) {
        initComponents();
        this.bottomPanel = bottomPanel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addPatientButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        hospitalNameLabel = new javax.swing.JLabel();
        communityLabel = new javax.swing.JLabel();
        cityLabel = new javax.swing.JLabel();
        phoneLabel = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        cityTextField = new javax.swing.JTextField();
        communityTextField = new javax.swing.JTextField();
        phoneNumberTextField = new javax.swing.JTextField();
        firstNameTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lastNameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        genderTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ageTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        patientTypeTextField = new javax.swing.JTextField();
        emailTextField = new javax.swing.JTextField();
        houseTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        goToSystemAdminButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(51, 51, 51));

        addPatientButton.setText("ADD PATIENT DETAILS");
        addPatientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPatientButtonActionPerformed(evt);
            }
        });

        viewButton.setText("VIEW PATIENT DETAILS");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("DELETE PATIENT DETAILS");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        hospitalNameLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        hospitalNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        hospitalNameLabel.setText("First Name");

        communityLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        communityLabel.setForeground(new java.awt.Color(255, 255, 255));
        communityLabel.setText("Community");

        cityLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        cityLabel.setForeground(new java.awt.Color(255, 255, 255));
        cityLabel.setText("City");

        phoneLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        phoneLabel.setForeground(new java.awt.Color(255, 255, 255));
        phoneLabel.setText("Phone No.");

        updateButton.setText("UPDATE PATIENT DETAILS");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        phoneNumberTextField.setPreferredSize(new java.awt.Dimension(100, 23));

        firstNameTextField.setPreferredSize(new java.awt.Dimension(100, 23));

        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Last Name", "Gender", "Age", "Patient Type", "Phone No.", "Email", "House", "Comminity", "City"
            }
        ));
        patientTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(patientTable);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Last Name");

        lastNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastNameTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Gender");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Age");

        ageTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageTextFieldActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("House");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Email");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Patient Type");

        patientTypeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientTypeTextFieldActionPerformed(evt);
            }
        });

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("PROVIDE PATIENT INFORMATION");

        goToSystemAdminButton.setText("GO BACK");
        goToSystemAdminButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goToSystemAdminButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(goToSystemAdminButton)
                .addGap(106, 106, 106)
                .addComponent(jLabel7)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(genderTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(hospitalNameLabel)
                            .addComponent(ageTextField)
                            .addComponent(jLabel6)
                            .addComponent(patientTypeTextField)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(firstNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                            .addComponent(lastNameTextField))))
                .addGap(176, 176, 176)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(houseTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(communityTextField)
                        .addComponent(cityTextField)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(communityLabel)
                                .addComponent(cityLabel))
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(phoneLabel)
                        .addComponent(jLabel5)
                        .addComponent(phoneNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(246, 246, 246))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addGap(106, 106, 106))
            .addGroup(layout.createSequentialGroup()
                .addGap(335, 335, 335)
                .addComponent(addPatientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                    .addComponent(viewButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(410, 410, 410))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(goToSystemAdminButton))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(hospitalNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel1)
                        .addGap(3, 3, 3)
                        .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(genderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(ageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(patientTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(phoneLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(phoneNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(11, 11, 11)
                                    .addComponent(jLabel5)
                                    .addGap(3, 3, 3)
                                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(81, 81, 81))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(houseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(communityLabel)
                                .addGap(16, 16, 16)
                                .addComponent(communityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(28, 28, 28)
                        .addComponent(cityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(47, 47, 47)
                .addComponent(addPatientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(viewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(157, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addPatientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPatientButtonActionPerformed
        // TODO add your handling code here:
        
        try{
        
            if((firstNameTextField.getText() == null || firstNameTextField.getText().isEmpty()) ||
                    (lastNameTextField.getText() == null || lastNameTextField.getText().isEmpty()) || 
                    (genderTextField.getText() == null || genderTextField.getText().isEmpty()) ||
                    (ageTextField.getText() == null || ageTextField.getText().isEmpty()) || 
                    (patientTypeTextField.getText()== null || patientTypeTextField.getText().isEmpty())||
                    (phoneNumberTextField.getText()== null || phoneNumberTextField.getText().isEmpty())||
                    (emailTextField.getText()== null || emailTextField.getText().isEmpty())||
                    (houseTextField.getText()== null || houseTextField.getText().isEmpty())||
                    (communityTextField.getText()== null || communityTextField.getText().isEmpty())||
                    (cityTextField.getText()== null || cityTextField.getText().isEmpty())) {


                throw new IllegalArgumentException("PLEASE PROVIDE ALL PATIENT INFORMATION");


            }
            else{

                Patient patient = new Patient();
                Community community = new Community();
                City city =  new City("","");
                House house = new House();

                patient.setFirstName(firstNameTextField.getText());
                patient.setLastName(lastNameTextField.getText());
                patient.setGender(genderTextField.getText());
                patient.setAge(Integer.parseInt(ageTextField.getText()));
                patient.setPatientType(patientTypeTextField.getText());
                patient.setPhone(Long.valueOf(phoneNumberTextField.getText()));
                patient.setEmail(emailTextField.getText());
                house.setStreetName(houseTextField.getText());
                community.setCommunityName(communityTextField.getText());
                city.setCityName(cityTextField.getText());
                patient.setHouse(house);
                patient.setCommunity(community);
                patient.setCity(city);


                populatePatientDetails(patient);

                firstNameTextField.setText("");
                lastNameTextField.setText("");
                genderTextField.setText("");
                ageTextField.setText("");
                patientTypeTextField.setText("");
                phoneNumberTextField.setText("");
                emailTextField.setText("");
                houseTextField.setText("");
                communityTextField.setText("");
                cityTextField.setText("");

                JOptionPane.showMessageDialog(this, "Patient Details Added Successfully");

            }
        
        }
        catch (IllegalArgumentException e){
            
            JOptionPane.showMessageDialog(this, e.getMessage(), "Form Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_addPatientButtonActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        // TODO add your handling code here:
         try{
            
            int selectedRowIndex = patientTable.getSelectedRow();
            
            if (selectedRowIndex<0){
                throw new IllegalArgumentException("Select any one Hospital to view");
            }
            
            else{
                
                ViewPatientDetails viewPatientDetails = new ViewPatientDetails(patientTable,bottomPanel);
                bottomPanel.add(viewPatientDetails);
                CardLayout layout = (CardLayout) bottomPanel.getLayout();
                layout.next(bottomPanel);
            }
                
            }
         catch (IllegalArgumentException e){
             JOptionPane.showMessageDialog(this, e.getMessage(), "Selection Error", JOptionPane.ERROR_MESSAGE);
         }
        
    }//GEN-LAST:event_viewButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:

        try{
            int selectedRowIndex = patientTable.getSelectedRow();
            if(selectedRowIndex < 0 ){

                throw new IllegalArgumentException("Select any one patient details to delete");

            }
            else{

                DefaultTableModel model = (DefaultTableModel) patientTable.getModel();

                model.removeRow(selectedRowIndex);

                firstNameTextField.setText("");
                lastNameTextField.setText("");
                genderTextField.setText("");
                ageTextField.setText("");
                patientTypeTextField.setText("");
                phoneNumberTextField.setText("");
                emailTextField.setText("");
                houseTextField.setText("");
                communityTextField.setText("");
                cityTextField.setText("");

            }

        }
        catch (IllegalArgumentException e){

            JOptionPane.showMessageDialog(this, e.getMessage(),"Selection Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        
         try{
            
            int selectedRowIndex = patientTable.getSelectedRow();
            if (selectedRowIndex<0){
                throw new IllegalArgumentException("Select any one Patient to update");
            }
            
            else{
                
                DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
                model.setValueAt(firstNameTextField.getText(),patientTable.getSelectedRow(),0);
                model.setValueAt(lastNameTextField.getText(),patientTable.getSelectedRow(),1);
                model.setValueAt(genderTextField.getText(),patientTable.getSelectedRow(),2);
                model.setValueAt(ageTextField.getText(),patientTable.getSelectedRow(),3);
                model.setValueAt(patientTypeTextField.getText(),patientTable.getSelectedRow(),4);

                model.setValueAt(phoneNumberTextField.getText(),patientTable.getSelectedRow(),5);

                model.setValueAt(emailTextField.getText(),patientTable.getSelectedRow(),6);

                model.setValueAt(houseTextField.getText(),patientTable.getSelectedRow(),7);

                model.setValueAt(communityTextField.getText(),patientTable.getSelectedRow(),8);
                model.setValueAt(cityTextField.getText(),patientTable.getSelectedRow(),9);



                firstNameTextField.setText("");
                lastNameTextField.setText("");
                genderTextField.setText("");
                ageTextField.setText("");
                patientTypeTextField.setText("");
                phoneNumberTextField.setText("");
                emailTextField.setText("");
                houseTextField.setText("");
                communityTextField.setText("");
                cityTextField.setText("");


                JOptionPane.showMessageDialog(this, "Patient Details Updated Successfully");
            }
                
            }
         
         catch (IllegalArgumentException e){
             
             JOptionPane.showMessageDialog(this, e.getMessage(), "Selection Error", JOptionPane.ERROR_MESSAGE);
         }

        
    }//GEN-LAST:event_updateButtonActionPerformed
    private void populatePatientDetails(Patient patient){
        
        String data[] = {patient.getFirstName(),patient.getLastName(),patient.getGender(),String.valueOf(patient.getAge()),patient.getPatientType(),patient.getPhone().toString(),patient.getEmail(),patient.getHouse().getStreetName(),patient.getCommunity().getCommunityName(),patient.getCity().getCityName()};

        DefaultTableModel tblmodel = (DefaultTableModel) patientTable.getModel();

        tblmodel.addRow(data);
        
    }
    private void ageTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ageTextFieldActionPerformed

    private void lastNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lastNameTextFieldActionPerformed

    private void patientTypeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientTypeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientTypeTextFieldActionPerformed

    private void patientTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientTableMouseClicked
        // TODO add your handling code here:
        
        try{
            int selectedRowIndex = patientTable.getSelectedRow();
            if(selectedRowIndex < 0 ){

                throw new IllegalArgumentException("Select any one doctor profile");
                
            }
            else{
                
                DefaultTableModel model = (DefaultTableModel) patientTable.getModel();
                
                firstNameTextField.setText(model.getValueAt(selectedRowIndex, 0).toString());
                lastNameTextField.setText(model.getValueAt(selectedRowIndex, 1).toString());
                genderTextField.setText(model.getValueAt(selectedRowIndex, 2).toString());
                ageTextField.setText(model.getValueAt(selectedRowIndex, 3).toString());
                patientTypeTextField.setText(model.getValueAt(selectedRowIndex, 4).toString());
                phoneNumberTextField.setText(model.getValueAt(selectedRowIndex, 5).toString());
                emailTextField.setText(model.getValueAt(selectedRowIndex, 6).toString());
                houseTextField.setText(model.getValueAt(selectedRowIndex, 7).toString());
                communityTextField.setText(model.getValueAt(selectedRowIndex, 8).toString());
                cityTextField.setText(model.getValueAt(selectedRowIndex, 9).toString());


            }
           
            
        }
        catch (IllegalArgumentException e){
            
            JOptionPane.showMessageDialog(this, e.getMessage(),"Selection Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_patientTableMouseClicked

    private void goToSystemAdminButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goToSystemAdminButtonActionPerformed
        // TODO add your handling code here:

        PatientOptionPanel patientOptionPanel = new PatientOptionPanel(bottomPanel);
        bottomPanel.add(patientOptionPanel);
        CardLayout layout = (CardLayout) bottomPanel.getLayout();
        layout.next(bottomPanel);
    }//GEN-LAST:event_goToSystemAdminButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPatientButton;
    private javax.swing.JTextField ageTextField;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JTextField cityTextField;
    private javax.swing.JLabel communityLabel;
    private javax.swing.JTextField communityTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JTextField genderTextField;
    private javax.swing.JButton goToSystemAdminButton;
    private javax.swing.JLabel hospitalNameLabel;
    private javax.swing.JTextField houseTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JTable patientTable;
    private javax.swing.JTextField patientTypeTextField;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JTextField phoneNumberTextField;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables
}
